										######################
										#    GIT COMMANDS    #
										######################

working directory -> staging area -> local repository -> remote repository

git help {command} 														get help for a command
git config              												make changes to git configuration file
git init {name}															create new git repository with new named folder
git init .																create new git repository in current folder
git status																shows status of repository
git add {filename}														adds file to staging area
git add .																adds all files in current folder
git commit -m {msg}														commits file
git commit -a															add modified files to staging area and then commit
git commit -am															combines previous two commands
git log																	displays log of all commits for local repo
git show																shows changes in last commit
git reset HEAD {file}													resets changes from staging area, but changes still in file
git checkout -- {file}													rolls back changes in file

git log --oneline --graph --decorate --all								Displays log user friendly
git config --global alias.hist "log --oneline --graph --decorate --all"	Alias (shortens a long command)

git mv {from} {to}														renames file from-to then commit
git rm {file}															removes file then commit

git add -u              updates deletions in working directory
git add -A				updates additions and deletions (i.e., ALL)

{editor} .gitignore		open file to specify where to ignore changes to these files (i.e, do not add to .git)
*.log					ignore changes to all .log files

git diff {1} {2}        show differences between two commits
git difftool {1} {2}    shows difference between commits side by side
git difftool --tool=vimdiff		sets the editor to use with difftool
git diff				shows difference between most recent uncommitted changes compared to head
git difftool			same idea as git diff

BRANCHES

git branch						shows branches;  * denotes current branch
git checkout -b	{new branch}	creates new branch and switches to that branch
git diff updates master			shows differences between branches
git checkout master				switch back to master branch
git hist						shows HEAD back on master branch
git merge updates				merges updates into master branch
git hist						HEAD is updated to show merge of branches
git branch -d updates			deletes updates branch (just the label, not the history)

CONFLICTS

git mergetool

TAGS

git tag {name}			make a milestone marker in log
git tag --list			show tags
git tag -d {name}		delete tag
git tag -a {name} -m "	make annotated tag
git show {tagname}		shows more tag info

STASHING

git stash				stashes changes to allow you to work on something else
git stash list			shows stash
git stash pop   		applies last stash

TIME TRAVEL

git reset {id} --soft	1.) soft reset=change where HEAD points, 2.) hard reset=removes items in staging areas, 3.) mixed reset
git reflog				shows all changes

GITHUB

git remote add {name} {url}			creates remote repository
git remote -v						displays remote repositories
git push -u {name} {branch} --tags	push the branch with tags

SSH

mkdir .ssh
cd .ssh/
ssh-keygen -t rsa -C "ptsouth97@gmail.com"
copy contents of id_rsa.pub file
paste in github -- settings -- new ssh
ssh -T git@github.com

UPDATE REPOSITORY AND REMOTE REFERENCES

git remote set-url origin git@github.com:ptsouth97/vim.git		changes url that git is pointing to
git remote show origin											shows more remote information
